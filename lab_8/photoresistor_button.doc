Программа для Arduino, которая включает светодиод и пищалку, когда становится темно, и позволяет отключать звук кнопкой. Вот как работает каждая строка:
const int ldrPin = A0;
— Я объявляю константу ldrPin и указываю, что фоторезистор подключён к аналоговому пину A0.
const int ledPin = 9;
— Я назначаю пин 9 для светодиода.
const int buzzerPin = 10;
— Я указываю, что пищалка подключена к пину 10.
const int buttonPin = 11;
— Я задаю пин 11 для кнопки, через которую можно будет включать и выключать звук.
bool isMuted = false;
— Я создаю логическую переменную isMuted, которая отвечает за то, включён ли звук. По умолчанию она равна false, значит звук включён.
int lastButtonState = HIGH;
— Я сохраняю предыдущее состояние кнопки. Сначала оно HIGH, потому что при режиме INPUT_PULLUP кнопка не нажата — это состояние HIGH.
________________________________________
void setup() {
— Я начинаю функцию setup(), которая выполняется один раз при запуске платы.
pinMode(ledPin, OUTPUT);
— Я настраиваю пин, к которому подключён светодиод, как выход. Это позволяет включать и выключать свет.
pinMode(buzzerPin, OUTPUT);
— Я делаю пин пищалки выходом, чтобы можно было подавать на него сигналы для звука.
pinMode(buttonPin, INPUT_PULLUP);
— Я настраиваю пин кнопки как вход с внутренней подтяжкой к питанию (INPUT_PULLUP). Это значит, что при не нажатой кнопке на пине будет HIGH, а при нажатой — LOW.
Serial.begin(9600);
— Я запускаю последовательный порт на скорости 9600 бод. Это нужно, если я захочу выводить данные в монитор порта.
}
— Я закрываю блок setup(). Здесь заканчивается настройка.
________________________________________
void loop() {
— Я начинаю основную часть программы, которая выполняется непрерывно.
int lightValue = analogRead(ldrPin);
— Я считываю значение с фоторезистора. Оно показывает уровень освещённости — чем меньше число, тем темнее.
int currentButtonState = digitalRead(buttonPin);
— Я читаю текущее состояние кнопки — нажата она или нет.
if (lastButtonState == HIGH && currentButtonState == LOW) {
— Я проверяю, произошло ли нажатие кнопки. Если раньше было HIGH (кнопка отпущена), а теперь LOW (кнопка нажата), значит, кнопку только что нажали.
isMuted = !isMuted;
— Если кнопку нажали, я меняю значение isMuted на противоположное. Если звук был включён, он выключается, и наоборот.
}
— Я закрываю условный блок, где проверяется нажатие кнопки.
lastButtonState = currentButtonState;
— Я сохраняю текущее состояние кнопки, чтобы в следующем цикле знать, было ли изменение.
________________________________________
if (lightValue < 400) {
— Я проверяю, насколько темно. Если значение меньше 400, считаю, что света недостаточно.
digitalWrite(ledPin, HIGH);
— Если темно, я включаю светодиод.
if (!isMuted) {
— Проверяю, выключен ли звук. Если isMuted равен false, то !isMuted становится true, значит звук разрешён.
tone(buzzerPin, 1000);
— Если звук разрешён, я включаю пищалку и издаю тон частотой 1000 Гц.
} else {
— Если звук выключен (mute), выполняется этот блок.
noTone(buzzerPin);
— Я отключаю звук, чтобы пищалка не издавала никаких сигналов.
}
— Я закрываю внутренний блок условия про звук.
} else {
— Если освещённость выше 400, то есть вокруг светло, я перехожу к этому блоку.
digitalWrite(ledPin, LOW);
— Я выключаю светодиод, потому что свет больше не нужен.
noTone(buzzerPin);
— И на всякий случай выключаю пищалку, чтобы она не издавала звук в светлое время.
}
— Закрываю блок, где проверяется уровень освещённости.
________________________________________
delay(200);
— Я добавляю паузу в 200 миллисекунд, чтобы немного замедлить цикл. Это помогает избежать дребезга кнопки и делает работу программы стабильнее.
}
— Заканчиваю цикл loop(). После этого программа начинает повторяться с начала и снова проверяет уровень света и состояние кнопки.
________________________________________
Таким образом, мой код работает так:
если в комнате темно — включается светодиод и пищалка начинает пищать;
если нажать кнопку — звук выключается, но свет остаётся включённым;
при появлении света всё автоматически выключается.

